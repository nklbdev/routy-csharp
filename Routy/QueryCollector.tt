<#@ include file="Common.txt" once="true" #>
using System;
using System.Collections.Generic;
using System.Collections.Specialized;

namespace Routy;

<#foreach (var pc in paramCountRange){
      var posTypeParams = F(pc, "TP_");#>
public class QueryCollector<TContext<#=L(posTypeParams)#>, TResult, TController>
{
    private readonly Func<TController> _controllerProvider;
    private readonly List<ParameterCollectorHandler<TContext<#=L(F(pc, "TP_"))#>, TResult>> _handlers = new();

    public QueryCollector(Func<TController> controllerProvider)
    {
        _controllerProvider = controllerProvider;
    }

<#    foreach (var qc in Enumerable.Range(0, funcCount - pc)){
          var qryTypeParams = F(qc, "TQ_");
          var pcfTypeParams = L(qryTypeParams);
          var funcTypeParams = R(J(posTypeParams, qryTypeParams));#>

    public QueryCollector<TContext<#=L(posTypeParams)#>, TResult, TController> Handle<#=Q(qryTypeParams)#>(
        ParameterCollectorFiller<TContext<#=pcfTypeParams#>, TResult, TController> filler,
        Func<<#=funcTypeParams#>TResult> handler)
    {
        _handlers.Insert(0, filler(new ParameterCollector<TContext, TResult, TController>(_controllerProvider)).CreateHandler(handler));
        return this;
    }

    public QueryCollector<TContext<#=L(posTypeParams)#>, TResult, TController> Handle<#=Q(qryTypeParams)#>(
        ParameterCollectorFiller<TContext<#=pcfTypeParams#>, TResult, TController> filler,
        Func<Func<TController>, Func<<#=funcTypeParams#>TResult>> handlerProvider)
    {
        _handlers.Insert(0, filler(new ParameterCollector<TContext, TResult, TController>(_controllerProvider)).CreateHandler(handlerProvider));
        return this;
    }

    // TODO: Understand what the MappedContext is and why I'm not using it
    public QueryCollector<TContext<#=L(posTypeParams)#>, TResult, TController> Handle<TMappedContext<#=L(qryTypeParams)#>>(
        Func<TContext, TMappedContext> contextMapper,
        ParameterCollectorFiller<TContext<#=pcfTypeParams#>, TResult, TController> filler,
        Func<<#=funcTypeParams#>TResult> handler)
    {
        _handlers.Insert(0, filler(new ParameterCollector<TContext, TResult, TController>(_controllerProvider)).CreateHandler(handler));
        return this;
    }

    // TODO: Understand what the MappedContext is and why I'm not using it
    public QueryCollector<TContext<#=L(posTypeParams)#>, TResult, TController> Handle<TMappedContext<#=L(qryTypeParams)#>>(
        Func<TContext, TMappedContext> contextMapper,
        ParameterCollectorFiller<TContext<#=pcfTypeParams#>, TResult, TController> filler,
        Func<Func<TController>, Func<<#=funcTypeParams#>TResult>> handlerProvider)
    {
        _handlers.Insert(0, filler(new ParameterCollector<TContext, TResult, TController>(_controllerProvider)).CreateHandler(handlerProvider));
        return this;
    }

<#    }#>
    public TResult Handle(NameValueCollection query, TContext context<#=L(F(pc, "TP_ p_"))#>)
    {
        foreach (var some in _handlers)
        {
            try
            {
                return some(query, context<#=L(F(pc, "p_"))#>);
            }
            catch
            {
            }
        }
        throw new NotImplementedException("26");
    }

}

<#}#>
