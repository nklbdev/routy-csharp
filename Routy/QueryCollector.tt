<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
<# const int maxParams = 16; #>
<# const int funcCount = maxParams + 1; #>
<# var paramCountRange = Enumerable.Range(0, funcCount).ToArray(); #>
<#
    string Q(string source) => string.IsNullOrEmpty(source) ? "" : $"<{source}>";
    string L(string source) => string.IsNullOrEmpty(source) ? "" : $", {source}";
    string R(string source) => string.IsNullOrEmpty(source) ? "" : $"{source}, ";
    string S(string source) => L(R(source));
    string J(params string[] sources) => string.Join(", ", sources.Where(x => !string.IsNullOrEmpty(x)));
    string F(int count, string format) => J(Enumerable.Range(1, count).Select(x => format.Replace("_", x.ToString())).ToArray());
#>
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Threading;
using System.Threading.Tasks;

namespace Routy
{
<#foreach (var pc in paramCountRange){
      var posTypeParams = F(pc, "TP_");#>
    public class QueryCollector<TContext<#=L(posTypeParams)#>, TResult, TController>
    {
        private readonly Func<TController> _controllerProvider;
        private readonly List<AsyncParameterCollectorHandler<TContext<#=L(F(pc, "TP_"))#>, TResult>> _handlers = new List<AsyncParameterCollectorHandler<TContext<#=L(F(pc, "TP_"))#>, TResult>>();

        public QueryCollector(Func<TController> controllerProvider)
        {
            _controllerProvider = controllerProvider;
        }

<#    foreach (var qc in Enumerable.Range(0, funcCount - pc)){
          var qryTypeParams = F(qc, "TQ_");
          var pcfTypeParams = L(qryTypeParams);
          var funcTypeParams = R(J(posTypeParams, qryTypeParams));#>
        // sync
        public QueryCollector<TContext<#=L(posTypeParams)#>, TResult, TController> Sync<#=Q(qryTypeParams)#>(
            ParameterCollectorFiller<TContext<#=pcfTypeParams#>, TResult, TController> filler,
            Func<<#=funcTypeParams#>TResult> handler)
        {
            _handlers.Insert(0, filler(new ParameterCollector<TContext, TResult, TController>(_controllerProvider)).CreateHandler(handler));
            return this;
        }

        public QueryCollector<TContext<#=L(posTypeParams)#>, TResult, TController> Sync<#=Q(qryTypeParams)#>(
            ParameterCollectorFiller<TContext<#=pcfTypeParams#>, TResult, TController> filler,
            Func<Func<TController>, Func<<#=funcTypeParams#>TResult>> handlerProvider)
        {
            _handlers.Insert(0, filler(new ParameterCollector<TContext, TResult, TController>(_controllerProvider)).CreateHandler(handlerProvider));
            return this;
        }

        public QueryCollector<TContext<#=L(posTypeParams)#>, TResult, TController> Sync<TParsedContext<#=L(qryTypeParams)#>>(
            Func<TContext> contextParser,
            ParameterCollectorFiller<TContext<#=pcfTypeParams#>, TResult, TController> filler,
            Func<<#=funcTypeParams#>TResult> handler)
        {
            _handlers.Insert(0, filler(new ParameterCollector<TContext, TResult, TController>(_controllerProvider)).CreateHandler(handler));
            return this;
        }

        public QueryCollector<TContext<#=L(posTypeParams)#>, TResult, TController> Sync<TParsedContext<#=L(qryTypeParams)#>>(
            Func<TContext> contextParser,
            ParameterCollectorFiller<TContext<#=pcfTypeParams#>, TResult, TController> filler,
            Func<Func<TController>, Func<<#=funcTypeParams#>TResult>> handlerProvider)
        {
            _handlers.Insert(0, filler(new ParameterCollector<TContext, TResult, TController>(_controllerProvider)).CreateHandler(handlerProvider));
            return this;
        }

        // async
        public QueryCollector<TContext<#=L(posTypeParams)#>, TResult, TController> Async<#=Q(qryTypeParams)#>(
            ParameterCollectorFiller<TContext<#=pcfTypeParams#>, TResult, TController> filler,
            Func<<#=funcTypeParams#>Task<TResult>> handler)
        {
            _handlers.Insert(0, filler(new ParameterCollector<TContext, TResult, TController>(_controllerProvider)).CreateHandler(handler));
            return this;
        }

        public QueryCollector<TContext<#=L(posTypeParams)#>, TResult, TController> Async<#=Q(qryTypeParams)#>(
            ParameterCollectorFiller<TContext<#=pcfTypeParams#>, TResult, TController> filler,
            Func<Func<TController>, Func<<#=funcTypeParams#>Task<TResult>>> handlerProvider)
        {
            _handlers.Insert(0, filler(new ParameterCollector<TContext, TResult, TController>(_controllerProvider)).CreateHandler(handlerProvider));
            return this;
        }

        public QueryCollector<TContext<#=L(posTypeParams)#>, TResult, TController> Async<TParsedContext<#=L(qryTypeParams)#>>(
            Func<TContext> contextParser,
            ParameterCollectorFiller<TContext<#=pcfTypeParams#>, TResult, TController> filler,
            Func<<#=funcTypeParams#>Task<TResult>> handler)
        {
            _handlers.Insert(0, filler(new ParameterCollector<TContext, TResult, TController>(_controllerProvider)).CreateHandler(handler));
            return this;
        }

        public QueryCollector<TContext<#=L(posTypeParams)#>, TResult, TController> Async<TParsedContext<#=L(qryTypeParams)#>>(
            Func<TContext> contextParser,
            ParameterCollectorFiller<TContext<#=pcfTypeParams#>, TResult, TController> filler,
            Func<Func<TController>, Func<<#=funcTypeParams#>Task<TResult>>> handlerProvider)
        {
            _handlers.Insert(0, filler(new ParameterCollector<TContext, TResult, TController>(_controllerProvider)).CreateHandler(handlerProvider));
            return this;
        }

<#    }#>
        public async Task<TResult> Handle(NameValueCollection query, TContext context<#=L(F(pc, "TP_ p_"))#>, CancellationToken ct)
        {
            foreach (var some in _handlers)
            {
                try
                {
                    return await some(query, context<#=L(F(pc, "p_"))#>, ct);
                }
                catch
                {
                }
            }
            throw new NotImplementedException("26");
        }

    }

<#}#>
}
