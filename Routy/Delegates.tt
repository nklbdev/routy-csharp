<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
<# const int funcCount = 17; #>
<# var paramCountRange = Enumerable.Range(0, funcCount).ToArray(); #>
<#
    string F(int count, string format, bool left = false, bool right = false) =>
        (left && count > 0 ? ", " : "") +
        string.Join(", ", Enumerable.Range(1, count).Select(x => format.Replace("_", x.ToString()))) +
        (right && count > 0 ? ", " : "");
#>
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Threading;
using System.Threading.Tasks;

namespace Routy
{
    // RequestHandler
    public delegate Task<TResult> AsyncRequestHandler<in TContext, TResult>(string httpMethod, Uri uri, TContext context, CancellationToken ct);

    // Functional value extractor
    public delegate T ValueExtractor<in TContext, out T>(TContext context, NameValueCollection parameters, CancellationToken ct);

    // Functional mutator
    public delegate T Mutator<T>(T t);

    #region Parameter collector fillers

<#foreach (var pc in paramCountRange){#>
    public delegate ParameterCollector<TContext<#=F(pc, "TQ_", true)#>, TResult, TController> ParameterCollectorFiller<TContext<#=F(pc, "TQ_", true)#>, TResult, TController>(ParameterCollector<TContext, TResult, TController> parameterCollector);
<#}#>

    #endregion

    #region Middle handlers

<#foreach (var pc in paramCountRange){#>
    public delegate Task<TResult> AsyncResourceCollectorHandler<in TContext<#=F(pc, "in TP_", true)#>, TResult>(string httpMethod, ICollection<string> urlSegments, NameValueCollection queryParameters, TContext context<#=F(pc, "TP_ tp_", true)#>, CancellationToken ct);
<#}#>

<#foreach (var pc in paramCountRange){#>
    public delegate Task<TResult> AsyncHttpMethodCollectorHandler<in TContext<#=F(pc, "in TP_", true)#>, TResult>(string httpMethod, NameValueCollection query, TContext context<#=F(pc, "TP_ tp_", true)#>, CancellationToken ct);
<#}#>

<#foreach (var pc in paramCountRange){#>
    public delegate Task<TResult> AsyncParameterCollectorHandler<in TContext<#=F(pc, "in TP_", true)#>, TResult>(NameValueCollection query, TContext context<#=F(pc, "TP_ tp_", true)#>, CancellationToken ct);
<#}#>

    #endregion
}
