<#@ include file="Common.txt" once="true" #>
using System;
using System.Collections.Specialized;

namespace Routy
{
<#foreach (var qc in paramCountRange){#>
    public class ParameterCollector<TContext<#=L(F(qc, "TQ_"))#>, TResult, TController>
    {
        private readonly Func<TController> _controllerProvider;

        public ParameterCollector(Func<TController> controllerProvider)
        {
            _controllerProvider = controllerProvider;
        }

<#    foreach (var veNumber in Enumerable.Range(1, qc)){#>
        public ValueExtractor<TContext, TQ<#=veNumber#>> Q<#=veNumber#> { get; set; }
<#    }#>

<#    if(qc < maxParams){#>
        private ParameterCollector<TContext<#=L(F(qc, "TQ_"))#>, T, TResult, TController> CreateNext<T>(ValueExtractor<TContext, T> valueExtractor) =>
            new(_controllerProvider)
                {
<#        foreach (var qNumber in Enumerable.Range(1, qc)){#>
                    Q<#=qNumber#> = Q<#=qNumber#>,
<#        }#>
                    Q<#=qc + 1#> = valueExtractor
                };
<#        var collectorParams = L(F(qc, "TQ_"));#>
        public ParameterCollector<TContext<#=collectorParams#>, TContext, TResult, TController> Context() =>
            CreateNext(ValueExtractors.Context<TContext>());

        public ParameterCollector<TContext<#=collectorParams#>, TParsedContext, TResult, TController> Context<TParsedContext>(Func<TContext, TParsedContext> contextParser) =>
            CreateNext(ValueExtractors.Context(contextParser));

        public ParameterCollector<TContext<#=collectorParams#>, T, TResult, TController> Single<T>(string name, Func<string, T> parser) =>
            CreateNext(ValueExtractors.Single<TContext, T>(name, parser));

        public ParameterCollector<TContext<#=collectorParams#>, string, TResult, TController> Single(string name) =>
            CreateNext(ValueExtractors.Single<TContext, string>(name, x => x));

        public ParameterCollector<TContext<#=collectorParams#>, T, TResult, TController> Single<T>(string name, Func<string, T> parser, T def) =>
            CreateNext(ValueExtractors.Single<TContext, T>(name, parser, def));

        public ParameterCollector<TContext<#=collectorParams#>, string, TResult, TController> Single(string name, string def) =>
            CreateNext(ValueExtractors.Single<TContext, string>(name, x => x, def));

        public ParameterCollector<TContext<#=collectorParams#>, T[], TResult, TController> Multiple<T>(string name, Func<string, T> parser) =>
            CreateNext(ValueExtractors.Multiple<TContext, T>(name, parser));

        public ParameterCollector<TContext<#=collectorParams#>, string[], TResult, TController> Multiple(string name) =>
            CreateNext(ValueExtractors.Multiple<TContext, string>(name, x => x));

        public ParameterCollector<TContext<#=collectorParams#>, T, TResult, TController> Custom<T>(Func<NameValueCollection, T> parser) =>
            CreateNext(ValueExtractors.Custom<TContext, T>(parser));
<#    }#>

<#    foreach (var pc in Enumerable.Range(0, funcCount - qc)){
          var apchTypeParams = F(pc, "TP_");
          var funcTypeParams = J(F(pc, "TP_"), F(qc, "TQ_"));
          var apchParams1 = J(F(pc, "p_"));
          var apchParams = J(F(pc, "p_"), F(qc, "Q_(context, query)"));
          var methodParams = F(pc, "TP_");
            #>
        public ParameterCollectorHandler<TContext<#=L(apchTypeParams)#>, TResult> CreateHandler<#=Q(methodParams)#>(Func<<#=R(funcTypeParams)#>TResult> handler) =>
            (query, context<#=L(apchParams1)#>) => handler(<#=apchParams#>);

        public ParameterCollectorHandler<TContext<#=L(apchTypeParams)#>, TResult> CreateHandler<#=Q(methodParams)#>(Func<Func<TController>, Func<<#=R(funcTypeParams)#>TResult>> handlerProvider) =>
            (query, context<#=L(apchParams1)#>) => handlerProvider(_controllerProvider)(<#=apchParams#>);

<#    }#>
    }

<#}#>
}
