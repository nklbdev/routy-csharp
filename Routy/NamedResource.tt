<#@ include file="Common.txt" once="true" #>
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;

namespace Routy;

<#foreach (var pc in paramCountRange){
      var posTypeParams = F(pc, "TP_");
      var posParams = F(pc, "TP_ p_");
      var posParams2 = F(pc, "p_");#>
public class NamedResource<TContext<#=L(posTypeParams)#>, TResult>
{
    private readonly HttpMethodCollectorHandler<TContext<#=L(posTypeParams)#>, TResult> _methodCollectorHandler;
    private readonly ResourceCollectorHandler<TContext<#=L(posTypeParams)#>, TResult> _nestedResourceCollectorHandler;

    public NamedResource(
        HttpMethodCollectorHandler<TContext<#=L(posTypeParams)#>, TResult> methodCollectorHandler,
        ResourceCollectorHandler<TContext<#=L(posTypeParams)#>, TResult> nestedResourceCollectorHandler)
    {
        _methodCollectorHandler = methodCollectorHandler;
        _nestedResourceCollectorHandler = nestedResourceCollectorHandler;
    }

    public TResult Handle(string httpMethod, IEnumerable<string> uriSegments, NameValueCollection query, TContext context<#=L(posParams)#>)
    {
        if (!uriSegments.Any())
            throw new NotImplementedException("6");

        var tail = uriSegments.Skip(1).ToArray();

        return tail.Any()
            ? _nestedResourceCollectorHandler(httpMethod, tail, query, context<#=L(posParams2)#>)
            : _methodCollectorHandler(httpMethod, query, context<#=L(posParams2)#>);
    }
}

<#}#>
