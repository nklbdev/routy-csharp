<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
<# const int maxParams = 16; #>
<# const int funcCount = maxParams + 1; #>
<# var paramCountRange = Enumerable.Range(0, funcCount).ToArray(); #>
<#
    string Q(string source) => string.IsNullOrEmpty(source) ? "" : $"<{source}>";
    string L(string source) => string.IsNullOrEmpty(source) ? "" : $", {source}";
    string R(string source) => string.IsNullOrEmpty(source) ? "" : $"{source}, ";
    string S(string source) => L(R(source));
    string J(params string[] sources) => string.Join(", ", sources.Where(x => !string.IsNullOrEmpty(x)));
    string F(int count, string format) => J(Enumerable.Range(1, count).Select(x => format.Replace("_", x.ToString())).ToArray());
#>
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace Routy
{
<#foreach (var pc in paramCountRange){
      var posTypeParams = F(pc, "TP_");
      var posParams = F(pc, "TP_ p_");
      var posParams2 = F(pc, "p_");#>
    public class NamedResource<TContext<#=L(posTypeParams)#>, TResult>
    {
        private readonly AsyncHttpMethodCollectorHandler<TContext<#=L(posTypeParams)#>, TResult> _methodCollectorHandler;
        private readonly AsyncResourceCollectorHandler<TContext<#=L(posTypeParams)#>, TResult> _nestedAsyncResourceCollectorHandler;
        
        public NamedResource(
            AsyncHttpMethodCollectorHandler<TContext<#=L(posTypeParams)#>, TResult> methodCollectorHandler,
            AsyncResourceCollectorHandler<TContext<#=L(posTypeParams)#>, TResult> nestedAsyncResourceCollectorHandler)
        {
            _methodCollectorHandler = methodCollectorHandler;
            _nestedAsyncResourceCollectorHandler = nestedAsyncResourceCollectorHandler;
        }
        
        public async Task<TResult> HandleAsync(string httpMethod, IEnumerable<string> uriSegments, NameValueCollection query, TContext context<#=L(posParams)#>, CancellationToken ct)
        {
            if (!uriSegments.Any())
                throw new NotImplementedException("6");

            var tail = uriSegments.Skip(1).ToArray();

            return tail.Any()
                ? await _nestedAsyncResourceCollectorHandler(httpMethod, tail, query, context<#=L(posParams2)#>, ct)
                : await _methodCollectorHandler(httpMethod, query, context<#=L(posParams2)#>, ct);
        }
    }

<#}#>
}
