<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
<# const int maxParams = 16; #>
<# const int funcCount = maxParams + 1; #>
<# var paramCountRange = Enumerable.Range(0, funcCount).ToArray(); #>
<#
    string Q(string source) => string.IsNullOrEmpty(source) ? "" : $"<{source}>";
    string L(string source) => string.IsNullOrEmpty(source) ? "" : $", {source}";
    string R(string source) => string.IsNullOrEmpty(source) ? "" : $"{source}, ";
    string S(string source) => L(R(source));
    string J(params string[] sources) => string.Join(", ", sources.Where(x => !string.IsNullOrEmpty(x)));
    string F(int count, string format) => J(Enumerable.Range(1, count).Select(x => format.Replace("_", x.ToString())).ToArray());
#>
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace Routy
{
<#foreach (var pc in paramCountRange){
      var posTypeParams = F(pc, "TP_");#>
    public class ResourceCollector<TContext<#=L(posTypeParams)#>, TResult, TController>
    {
        private readonly Func<TController> _controllerProvider;
        private readonly Dictionary<string, AsyncResourceCollectorHandler<TContext<#=L(posTypeParams)#>, TResult>> _namedResourceHandlers = new Dictionary<string, AsyncResourceCollectorHandler<TContext<#=L(posTypeParams)#>, TResult>>();
        private readonly List<AsyncResourceCollectorHandler<TContext<#=L(posTypeParams)#>, TResult>> _valuedResourceHandlers = new List<AsyncResourceCollectorHandler<TContext<#=L(posTypeParams)#>, TResult>>();

        public ResourceCollector(Func<TController> controllerProvider)
        {
            _controllerProvider = controllerProvider;
        }

<#    if (pc < maxParams){#>
        public ResourceCollector<TContext<#=L(posTypeParams)#>, TResult, TController> Named(string name,
            Mutator<HttpMethodCollector<TContext<#=L(posTypeParams)#>, TResult, TController>> httpMethodCollectorFiller = null,
            Mutator<ResourceCollector<TContext<#=L(posTypeParams)#>, TResult, TController>> nestedResourceCollectorFiller = null
            ) => Named(name, _controllerProvider, httpMethodCollectorFiller, nestedResourceCollectorFiller);
        
        public ResourceCollector<TContext<#=L(posTypeParams)#>, TResult, TController> Named<TNewController>(string name,
            Func<TNewController> controllerProvider,
            Mutator<HttpMethodCollector<TContext<#=L(posTypeParams)#>, TResult, TNewController>> httpMethodCollectorFiller = null,
            Mutator<ResourceCollector<TContext<#=L(posTypeParams)#>, TResult, TNewController>> nestedResourceCollectorFiller = null
            )
        {
            if (httpMethodCollectorFiller == null) httpMethodCollectorFiller = x => x;
            if (nestedResourceCollectorFiller == null) nestedResourceCollectorFiller = x => x;
            _namedResourceHandlers[name] = new NamedResource<TContext<#=L(F(pc, "TP_"))#>, TResult>(
                httpMethodCollectorFiller(new HttpMethodCollector<TContext<#=L(posTypeParams)#>, TResult, TNewController>(controllerProvider)).Handle,
                nestedResourceCollectorFiller(new ResourceCollector<TContext<#=L(posTypeParams)#>, TResult, TNewController>(controllerProvider)).HandleAsync).HandleAsync;
            return this;
        }
        
        public ResourceCollector<TContext<#=L(posTypeParams)#>, TResult, TController> Valued<TValue>(Func<string, TValue> parser,
            Mutator<HttpMethodCollector<TContext<#=L(posTypeParams)#>, TValue, TResult, TController>> httpMethodCollectorFiller = null,
            Mutator<ResourceCollector<TContext<#=L(posTypeParams)#>, TValue, TResult, TController>> nestedResourceCollectorFiller = null
            ) => Valued(parser, _controllerProvider, httpMethodCollectorFiller, nestedResourceCollectorFiller);

        public ResourceCollector<TContext<#=L(posTypeParams)#>, TResult, TController> Valued<TValue, TNewController>(Func<string, TValue> parser,
            Func<TNewController> controllerProvider,
            Mutator<HttpMethodCollector<TContext<#=L(posTypeParams)#>, TValue, TResult, TNewController>> httpMethodCollectorFiller = null,
            Mutator<ResourceCollector<TContext<#=L(posTypeParams)#>, TValue, TResult, TNewController>> nestedResourceCollectorFiller = null
            )
        {
            if (httpMethodCollectorFiller == null) httpMethodCollectorFiller = x => x;
            if (nestedResourceCollectorFiller == null) nestedResourceCollectorFiller = x => x;
            _valuedResourceHandlers.Add(new ValuedResource<TContext<#=L(F(pc, "TP_"))#>, TValue, TResult>(
                parser,
                httpMethodCollectorFiller(new HttpMethodCollector<TContext<#=L(posTypeParams)#>, TValue, TResult, TNewController>(controllerProvider)).Handle,
                nestedResourceCollectorFiller(new ResourceCollector<TContext<#=L(posTypeParams)#>, TValue, TResult, TNewController>(controllerProvider)).HandleAsync).Handle);
            return this;
        }

<#    }#>
        public async Task<TResult> HandleAsync(string httpMethod, ICollection<string> urlSegments, NameValueCollection queryParameters, TContext context<#=L(F(pc, "TP_ p_"))#>, CancellationToken ct)
        {
            if (!urlSegments.Any())
                throw new NotImplementedException("15");
            
            var urlHead = urlSegments.First();

            if (_namedResourceHandlers.TryGetValue(urlHead, out var namedResourceHandler))
                return await namedResourceHandler(httpMethod, urlSegments, queryParameters, context<#=L(F(pc, "p_"))#>, ct);

            foreach (var valuedResourceHandler in _valuedResourceHandlers)
                try
                {
                    return await valuedResourceHandler(httpMethod, urlSegments, queryParameters, context<#=L(F(pc, "p_"))#>, ct);
                }
                catch
                {
                    
                }
            
            throw new NotImplementedException("16");
        }
    }

<#}#>
}
