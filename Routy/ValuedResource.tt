<#@ include file="Common.txt" once="true" #>
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;

namespace Routy;

<#
    var paramCountRangeArray = paramCountRange.ToArray();
    foreach (var paramCount in paramCountRangeArray.Take(paramCountRangeArray.Length - 1)){
        var posTypeParams = F(paramCount, "TP_");
        var posParams = F(paramCount, "TP_ p_");
        var posParams2 = F(paramCount, "p_");#>
public class ValuedResource<TContext<#=L(posTypeParams)#>, TValue, TResult>
{
    private readonly Parser<TValue, bool> _parser;
    private readonly HttpMethodCollectorHandler<TContext<#=L(posTypeParams)#>, TValue, TResult> _methodCollectorHandler;
    private readonly ResourceCollectorHandler<TContext<#=L(posTypeParams)#>, TValue, TResult> _nestedResourceCollectorHandler;

    public ValuedResource(
        Parser<TValue, bool> parser,
        HttpMethodCollectorHandler<TContext<#=L(posTypeParams)#>, TValue, TResult> methodCollectorHandler,
        ResourceCollectorHandler<TContext<#=L(posTypeParams)#>, TValue, TResult> nestedResourceCollectorHandler)
    {
        _parser = parser;
        _methodCollectorHandler = methodCollectorHandler;
        _nestedResourceCollectorHandler = nestedResourceCollectorHandler;
    }

    public TResult Handle(string httpMethod, IEnumerable<string> uriSegments, NameValueCollection query, TContext context<#=L(posParams)#>)
    {
        if (!uriSegments.Any())
            throw new NotImplementedException("1");

        var head = uriSegments.First();
        var tail = uriSegments.Skip(1).ToArray();

        if (_parser(head, out var value))
            return tail.Any()
                ? _nestedResourceCollectorHandler(httpMethod, tail, query, context<#=L(posParams2)#>, value)
                : _methodCollectorHandler(httpMethod, query, context<#=L(posParams2)#>, value);

        throw new NotImplementedException("2");
    }
}

<#}#>
