<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
<# const int maxParams = 16; #>
<# const int funcCount = maxParams + 1; #>
<# var paramCountRange = Enumerable.Range(0, funcCount).ToArray(); #>
<#
    string Q(string source) => string.IsNullOrEmpty(source) ? "" : $"<{source}>";
    string L(string source) => string.IsNullOrEmpty(source) ? "" : $", {source}";
    string R(string source) => string.IsNullOrEmpty(source) ? "" : $"{source}, ";
    string S(string source) => L(R(source));
    string J(params string[] sources) => string.Join(", ", sources.Where(x => !string.IsNullOrEmpty(x)));
    string F(int count, string format) => J(Enumerable.Range(1, count).Select(x => format.Replace("_", x.ToString())).ToArray());
#>
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Threading;
using System.Threading.Tasks;

namespace Routy
{
<#foreach (var pc in paramCountRange){
      var posTypeParams = F(pc, "TP_");#>
    public class HttpMethodCollector<TContext<#=L(posTypeParams)#>, TResult, TController>
    {
        private readonly Func<TController> _controllerProvider;
        private readonly Dictionary<string, QueryCollector<TContext<#=L(posTypeParams)#>, TResult, TController>> _queryCollectors = new Dictionary<string, QueryCollector<TContext<#=L(posTypeParams)#>, TResult, TController>>();

        public HttpMethodCollector(Func<TController> controllerProvider)
        {
            _controllerProvider = controllerProvider;
        }
        
        public HttpMethodCollector<TContext<#=L(posTypeParams)#>, TResult, TController> Method(
            string method,
            Mutator<QueryCollector<TContext<#=L(posTypeParams)#>, TResult, TController>> filler)
        {
            _queryCollectors[method] = filler(new QueryCollector<TContext<#=L(posTypeParams)#>, TResult, TController>(_controllerProvider));
            return this;
        }
        
        public async Task<TResult> Handle(string httpMethod, NameValueCollection query, TContext context<#=L(F(pc, "TP_ p_"))#>, CancellationToken ct)
        {
            if (_queryCollectors.TryGetValue(httpMethod.ToLower(), out var queryCollector))
                return await queryCollector.Handle(query, context<#=L(F(pc, "p_"))#>, ct);
            throw new NotImplementedException("23");
        }
    }

<#}#>
}