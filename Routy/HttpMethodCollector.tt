<#@ include file="Common.txt" once="true" #>
using System;
using System.Collections.Generic;
using System.Collections.Specialized;

namespace Routy;

<#foreach (var pc in paramCountRange){
      var posTypeParams = F(pc, "TP_");#>
public class HttpMethodCollector<TContext<#=L(posTypeParams)#>, TResult, TController>
{
    private readonly Func<TController> _controllerProvider;
    private readonly Dictionary<string, QueryCollector<TContext<#=L(posTypeParams)#>, TResult, TController>> _queryCollectors = new();

    public HttpMethodCollector(Func<TController> controllerProvider)
    {
        _controllerProvider = controllerProvider;
    }

    public HttpMethodCollector<TContext<#=L(posTypeParams)#>, TResult, TController> Method(
        string method,
        Mutator<QueryCollector<TContext<#=L(posTypeParams)#>, TResult, TController>> filler)
    {
        _queryCollectors[method] = filler(new QueryCollector<TContext<#=L(posTypeParams)#>, TResult, TController>(_controllerProvider));
        return this;
    }

    public TResult Handle(string httpMethod, NameValueCollection query, TContext context<#=L(F(pc, "TP_ p_"))#>)
    {
        if (_queryCollectors.TryGetValue(httpMethod.ToLower(), out var queryCollector))
            return queryCollector.Handle(query, context<#=L(F(pc, "p_"))#>);
        throw new NotImplementedException("23");
    }
}

<#}#>
